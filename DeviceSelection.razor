@inject ISessionService SessionService
@inject IBluetoothService BluetoothService

@if (ShowPopup)
{
    <div class="popup-overlay">
        <div class="popup-content">
            <h3>Select a Bluetooth Device</h3>

            @if (Devices?.Any() == true)
            {
                <select @bind="SelectedAddress">
                    <option value="">-- Select Device --</option>
                    @foreach (var device in Devices)
                    {
                        <option value="@device.Address">@device.Name (@device.Address)</option>
                    }
                </select>
                <br />
                <button @onclick="ConfirmSelection">Connect</button>
                <button @onclick="ClosePopup">Cancel</button>
            }
            else
            {
                <p>No devices found. Please pair a device first.</p>
                <button @onclick="ClosePopup">Close</button>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowPopup { get; set; }
    [Parameter] public EventCallback<bool> ShowPopupChanged { get; set; }
    [Parameter] public EventCallback<BluetoothDeviceModel?> OnDeviceConnected { get; set; }

    private List<BluetoothDeviceModel> Devices = new();
    private string? SelectedAddress;

    protected override async Task OnParametersSetAsync()
    {
        if (ShowPopup)
        {
            Devices = await BluetoothService.GetAvailableDevicesAsync();
        }
    }

    private async Task ConfirmSelection()
    {
        var selected = Devices.FirstOrDefault(d => d.Address == SelectedAddress);
        if (selected != null)
        {
            var success = await BluetoothService.ConnectToDeviceAsync(selected);
            if (success)
            {
                await SessionService.SetSelectedBluetoothDeviceAsync(selected);
                await OnDeviceConnected.InvokeAsync(selected);
            }
        }
        await ClosePopup();
    }

    private async Task ClosePopup()
    {
        await ShowPopupChanged.InvokeAsync(false);
    }
}
