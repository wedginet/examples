trigger:
  branches:
    include:
      - master  # Targeting the master branch

pool:
  vmImage: 'macOS-latest'  # Using macOS because it's required for MAUI builds

variables:
  buildConfiguration: 'Release'
  androidSdkVersion: '34'  # Targeting Android SDK 34
  androidBuildToolVersion: '34.0.0'  # Targeting Android SDK 34.0.0
  KeystoreAlias: 'KeystoreAlias'  # Set the alias name of your keystore
  KeystorePassword: 'xxxxxxxx'  # This will pull from the secret variable
  KeystoreAliasPassword: 'xxxxxxxxx'  # This will pull from the secret variable

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.401'  # Using .NET 8.0.401 SDK

- task: UseDotNet@2
  inputs:
    packageType: 'runtime'
    version: '8.0.8'  # Using .NET 8.0.8 runtime

- script: |
    sudo $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-$(androidSdkVersion)" "build-tools;$(androidBuildToolVersion)"
    sudo $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;$(androidBuildToolVersion)"
  displayName: 'Install Android SDK and Build Tools'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'KeystoreFileName.keystore'  # New simplified name
  displayName: 'Download Keystore File'

- script: |
    echo "Verifying Keystore File:"
    ls -la "$(Agent.TempDirectory)"
    ls -la "$(Agent.TempDirectory)/KeystoreFileName.keystore"
  displayName: 'Verify Keystore File'

# New step: Increment version code
- script: |
    echo "Current working directory:"
    pwd
    echo "Listing files in the current directory:"
    ls -la
    echo "Attempting to locate AndroidManifest.xml:"
    ls -la Platforms/Android/
    
    # Extracting versionCode
    versionCode=$(grep -o 'versionCode [0-9]\+' Platforms/Android/AndroidManifest.xml | grep -o '[0-9]\+')
    echo "Current versionCode: $versionCode"

    # Incrementing versionCode
    newVersionCode=$((versionCode + 1))
    echo "New versionCode: $newVersionCode"

    # Replacing the versionCode in the AndroidManifest.xml
    sed -i '' "s/versionCode $versionCode/versionCode $newVersionCode/" Platforms/Android/AndroidManifest.xml
  displayName: 'Increment Android Version Code'

- script: |
    dotnet workload restore
  displayName: 'Restore .NET MAUI Workloads'

- script: |
    dotnet restore 'MyApp.csproj'
  displayName: 'Restore NuGet packages for MyApp'

#-- script: |
#    dotnet build 'MyApp.csproj' --configuration $(buildConfiguration) --no-restore   
#  displayName: 'Build MyApp Project (All)'

- script: |
    dotnet build 'MyApp.csproj' --configuration $(buildConfiguration) --framework net8.0-android
  displayName: 'Build MyApp Project (Android only)'

- script: |
    if [ -f "$(Agent.TempDirectory)/KeystoreFileName.keystore" ]; then
      echo "Keystore exists."
    else
      echo "Keystore does not exist!"
      exit 1
    fi
  displayName: 'Check if Keystore File Exists'

- script: |
    dotnet publish "MyApp.csproj" -f:net8.0-android -c $(buildConfiguration) --no-restore \
    -p:AndroidSdkVersion=$(androidSdkVersion) \
    -p:AndroidPackageFormat=aab
  displayName: 'Publish MyApp Android App Bundle Without Signing'

- script: |
    echo "Listing contents of the output directory:"
    ls -la bin/Release/net8.0-android/
  displayName: 'Verify APK/AAB Location'

- script: |
    echo "Listing contents of the build directory recursively:"
    find bin/Release/net8.0-android/ -type f
  displayName: 'List All Files in Output Directory'

- script: |
    APK_PATH=$(find bin/Release/net8.0-android -name "*.apk" -print -quit)
    jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore $(Agent.TempDirectory)/Sojourn_Network_NFP.keystore -storepass $(KeystorePassword) -keypass $(KeystoreAliasPassword) "$APK_PATH" $(KeystoreAlias)
    $ANDROID_HOME/build-tools/$(androidBuildToolVersion)/zipalign -v 4 "$APK_PATH" "aligned-$(basename "$APK_PATH")"
    mv "aligned-$(basename "$APK_PATH")" "$APK_PATH"
  displayName: 'Sign and Align APK Manually'

- task: CopyFiles@2
  inputs:
    contents: '**/*.aab'
    targetFolder: '$(build.artifactStagingDirectory)/bundle'
  displayName: 'Copy AAB to artifacts'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)/bundle'
    artifactName: 'aab'
  displayName: 'Publish AAB'
- task: DownloadSecureFile@1
  inputs:
    secureFile: 'google-play-publisher-key.json'
  displayName: 'Download Google Play JSON key'

- script: |
    echo "Copying Google Play JSON key to the correct location."
    cp "$(Agent.TempDirectory)/google-play-publisher-key.json" "$(Build.SourcesDirectory)/google-play-publisher-key.json"
  displayName: 'Copy Google Play JSON Key'

- script: |
    echo "Verifying the JSON key file exists in the expected location:"
    ls -la $(Build.SourcesDirectory)/google-play-publisher-key.json
  displayName: 'Verify Google Play JSON Key Location'

- task: GooglePlayPromote@3
  inputs:
    authType: 'JsonFile'
    serviceAccountKey: '$(Build.SourcesDirectory)/google-play-publisher-key.json'
    packageName: 'com.company.MyApp'
    sourceTrack: 'internal'
    destinationTrack: 'beta'
