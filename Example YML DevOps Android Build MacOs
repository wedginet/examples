trigger:
  branches:
    include:
      - master  # Targeting the master branch

pool:
  vmImage: 'macOS-latest'  # Using macOS because it's required for MAUI builds

variables:
  buildConfiguration: 'Release'
  androidSdkVersion: '34'  # Targeting Android SDK 34

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.401'  # Using .NET 8.0.401 SDK

- task: UseDotNet@2
  inputs:
    packageType: 'runtime'
    version: '8.0.8'  # Using .NET 8.0.8 runtime

- script: |
    sudo $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-$(androidSdkVersion)" "build-tools;$(androidSdkVersion)"
  displayName: 'Install Android SDK'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'your-keystore-file.keystore'  # The secure file name of your keystore in Azure DevOps
  displayName: 'Download Keystore File'

- script: |
    dotnet restore 'My.Maui/My.Maui.csproj'
  displayName: 'Restore NuGet packages for My.Maui'

- script: |
    dotnet build 'My.Maui/My.Maui.csproj' --configuration $(buildConfiguration) --no-restore
  displayName: 'Build My.Maui Project'

- script: |
    dotnet publish 'My.Maui/My.Maui.csproj' -f:net8.0-android -c $(buildConfiguration) --no-restore \
    -p:AndroidSdkVersion=$(androidSdkVersion) \
    -p:AndroidPackageFormat=aab \
    -p:AndroidKeyStore=true \
    -p:AndroidSigningKeyAlias=$(KeystoreAlias) \
    -p:AndroidSigningKeyPass=$(KeystoreAliasPassword) \
    -p:AndroidSigningStorePass=$(KeystorePassword) \
    -p:AndroidSigningStore=$(Agent.TempDirectory)/your-keystore-file.keystore  # Reference to the downloaded keystore file
  displayName: 'Publish My.Maui Android App Bundle'

- task: CopyFiles@2
  inputs:
    contents: '**/*.aab'
    targetFolder: '$(build.artifactStagingDirectory)/bundle'
  displayName: 'Copy AAB to artifacts'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)/bundle'
    artifactName: 'aab'
  displayName: 'Publish AAB'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'google-play-publisher-key.json'  # Upload your Google Play JSON key as a secure file in Azure DevOps
  displayName: 'Download Google Play JSON key'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      echo "$(GOOGLE_PLAY_JSON_KEY)" > $(Build.SourcesDirectory)/google-play-publisher-key.json
      gcloud auth activate-service-account --key-file=$(Build.SourcesDirectory)/google-play-publisher-key.json
      gcloud config set project your-google-play-project-id
      gcloud --quiet alpha androidpublisher edits tracks update --package-name your.package.name --track alpha --bundle "$(Build.SourcesDirectory)/bundle/your-app.aab"
  displayName: 'Upload to Google Play'
  env:
    GOOGLE_PLAY_JSON_KEY: $(Build.SourcesDirectory)/google-play-publisher-key.json

