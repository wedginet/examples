trigger:
  branches:
    include:
      - master  # Targeting the master branch

pool:
  vmImage: 'windows-latest'  # Using Windows for the build

variables:
  buildConfiguration: 'Release'
  androidSdkVersion: '34'  # Targeting Android SDK 34
  androidBuildToolVersion: '34.0.0'  # Targeting Android SDK 34.0.0
  KeystoreAlias: 'KeystoreAlias'  # Set the alias name of your keystore
  KeystorePassword: 'xxxxxxxx'  # This will pull from the secret variable
  KeystoreAliasPassword: 'xxxxxxxxx'  # This will pull from the secret variable

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.401'  # Using .NET 8.0.401 SDK

- task: UseDotNet@2
  inputs:
    packageType: 'runtime'
    version: '8.0.8'  # Using .NET 8.0.8 runtime

- powershell: |
    & "$env:ANDROID_HOME\cmdline-tools\latest\bin\sdkmanager.bat" "platforms;android-$(androidSdkVersion)" "build-tools;$(androidBuildToolVersion)"
  displayName: 'Install Android SDK and Build Tools'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'KeystoreFileName.keystore'  # New simplified name
  displayName: 'Download Keystore File'

- powershell: |
    Write-Host "Verifying Keystore File:"
    Get-ChildItem -Path "$(Agent.TempDirectory)"
    Get-ChildItem -Path "$(Agent.TempDirectory)\KeystoreFileName.keystore"
  displayName: 'Verify Keystore File'

# New step: Increment version code
- powershell: |
    Write-Host "Current working directory:"
    Get-Location
    Write-Host "Listing files in the current directory:"
    Get-ChildItem -Path "."

    Write-Host "Attempting to locate AndroidManifest.xml:"
    Get-ChildItem -Path "Platforms/Android/"

    # Extracting versionCode
    $versionCode = (Select-String -Path "Platforms/Android/AndroidManifest.xml" -Pattern 'versionCode \d+').Matches[0].Value.Split(" ")[1]
    Write-Host "Current versionCode: $versionCode"

    # Incrementing versionCode
    $newVersionCode = [int]$versionCode + 1
    Write-Host "New versionCode: $newVersionCode"

    # Replacing the versionCode in the AndroidManifest.xml
    (Get-Content "Platforms/Android/AndroidManifest.xml") -replace "versionCode $versionCode", "versionCode $newVersionCode" | Set-Content "Platforms/Android/AndroidManifest.xml"
  displayName: 'Increment Android Version Code'

- script: |
    dotnet workload restore
  displayName: 'Restore .NET MAUI Workloads'

- script: |
    dotnet restore 'myapp.csproj'
  displayName: 'Restore NuGet packages for myapp'

- script: |
    dotnet build 'myapp.csproj' --configuration $(buildConfiguration) --framework net8.0-android
  displayName: 'Build myapp Project (Android only)'

- powershell: |
    if (Test-Path "$(Agent.TempDirectory)\KeystoreFileName.keystore") {
      Write-Host "Keystore exists."
    } else {
      Write-Host "Keystore does not exist!"
      exit 1
    }
  displayName: 'Check if Keystore File Exists'

- script: |
    dotnet publish "myapp.csproj" -f:net8.0-android -c $(buildConfiguration) --no-restore \
    -p:AndroidSdkVersion=$(androidSdkVersion) \
    -p:AndroidPackageFormat=aab
  displayName: 'Publish myapp Android App Bundle Without Signing'

- powershell: |
    Write-Host "Listing contents of the output directory:"
    Get-ChildItem -Path "bin/Release/net8.0-android/"
  displayName: 'Verify APK/AAB Location'

- powershell: |
    Write-Host "Listing contents of the build directory recursively:"
    Get-ChildItem -Path "bin/Release/net8.0-android/" -Recurse
  displayName: 'List All Files in Output Directory'

- powershell: |
    $APK_PATH = Get-ChildItem -Path "bin/Release/net8.0-android" -Filter "*.apk" | Select-Object -First 1
    & "$env:ANDROID_HOME\build-tools\$env:androidBuildToolVersion\apksigner.bat" sign --ks "$(Agent.TempDirectory)\KeystoreFileName.keystore" --ks-pass pass:$(KeystorePassword) --key-pass pass:$(KeystoreAliasPassword) --ks-key-alias $(KeystoreAlias) "$APK_PATH"
    & "$env:ANDROID_HOME\build-tools\$env:androidBuildToolVersion\zipalign.bat" -v 4 "$APK_PATH" "aligned-$($APK_PATH.Name)"
    Move-Item "aligned-$($APK_PATH.Name)" "$APK_PATH"
  displayName: 'Sign and Align APK Manually'

- task: CopyFiles@2
  inputs:
    contents: '**/*.aab'
    targetFolder: '$(build.artifactStagingDirectory)/bundle'
  displayName: 'Copy AAB to artifacts'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)/bundle'
    artifactName: 'aab'
  displayName: 'Publish AAB'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'google-play-publisher-key.json'
  displayName: 'Download Google Play JSON key'

- powershell: |
    Write-Host "Copying Google Play JSON key to the correct location."
    Copy-Item "$(Agent.TempDirectory)\google-play-publisher-key.json" "$(Build.SourcesDirectory)\google-play-publisher-key.json"
  displayName: 'Copy Google Play JSON Key'

- powershell: |
    Write-Host "Verifying the JSON key file exists in the expected location:"
    Get-ChildItem -Path "$(Build.SourcesDirectory)\google-play-publisher-key.json"
  displayName: 'Verify Google Play JSON Key Location'

- task: GooglePlayPromote@3
  inputs:
    authType: 'JsonFile'
    serviceAccountKey: '$(Build.SourcesDirectory)/google-play-publisher-key.json'
    packageName: 'network.myapp.myapp'
    sourceTrack:
